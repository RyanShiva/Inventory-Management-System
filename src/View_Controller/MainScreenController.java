package View_Controller;

import Model.Inventory;
import Model.Part;
import Model.Product;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.stage.Stage;

import java.io.IOException;
import java.net.URL;
import java.util.Optional;
import java.util.ResourceBundle;

/** This class controls the Main screen.*/
public class MainScreenController implements Initializable {

    Stage stage;
    Parent scene;

    /** This method switches the screen to the location specified by the location parameter.
     * @param location path to the screen to load
     * @param event ActionEvent caused by the user clicking a button*/
    void SwitchScreen (String location, ActionEvent event) throws IOException {
        stage = (Stage)((Button)event.getSource()).getScene().getWindow();
        scene = FXMLLoader.load(getClass().getResource(location));
        stage.setScene(new Scene(scene));
        stage.show();
    }


    @FXML
    private TextField searchPartsTxt;

    @FXML
    private TableView<Part> partsView;

    @FXML
    private TableColumn<Part, Integer> partIdCol;

    @FXML
    private TableColumn<Part, String> partNameCol;

    @FXML
    private TableColumn<Part, Integer> partInventoryCol;

    @FXML
    private TableColumn<Part, Double> partPriceCol;

    @FXML
    private TableView<Product> productsView;

    @FXML
    private TextField searchProductsTxt;

    @FXML
    private TableColumn<Product, Integer> productIdCol;

    @FXML
    private TableColumn<Product, String> productNameCol;

    @FXML
    private TableColumn<Product, Integer> productInventoryCol;

    @FXML
    private TableColumn<Product, Double> productPriceCol;

    @FXML
    /** This is the onKeyPressedSearchParts event handler.
     * This method handles the event generated when the user searches for a part or clears the search bar.
     * @param event ActionEvent generated by the user searching for a part or clearing the search bar*/
    void onKeyPressedSearchParts(KeyEvent event) {
        if(searchPartsTxt.getText().equals(""))
            partsView.setItems(Inventory.getAllParts());
        else if(event.getCode().equals(KeyCode.ENTER)) {
            String query = searchPartsTxt.getText();
            ObservableList<Part> matchingParts = Inventory.lookupPart(query);

            if (matchingParts.size() == 0) {
                try {
                    int id = Integer.parseInt(query);
                    if (Inventory.lookupPart(id) != null)
                        matchingParts.add(Inventory.lookupPart(id));
                }
                catch (NumberFormatException e) {
                    Alert alert = new Alert (Alert.AlertType.ERROR);
                    alert.setTitle("Error Dialog");
                    alert.setContentText("Part Name not found.");
                    alert.showAndWait();
                    return;
                }
            }
            if (matchingParts.size() != 0) {
                partsView.setItems(matchingParts);
            }
            else {
                Alert alert = new Alert (Alert.AlertType.ERROR);
                alert.setTitle("Error Dialog");
                alert.setContentText("Part ID not found.");
                alert.showAndWait();
            }
        }
    }

    @FXML
    /** This is the onKeyPressedSearchProducts event handler.
     * This method handles the event generated when the user searches for a product or clears the search bar.
     * @param event ActionEvent generated by the user searching for a product or clearing the search bar*/
    void onKeyPressedSearchProducts(KeyEvent event) {
        if(searchProductsTxt.getText().equals(""))
            productsView.setItems(Inventory.getAllProducts());
        else if(event.getCode().equals(KeyCode.ENTER)) {
            String query = searchProductsTxt.getText();
            ObservableList<Product> matchingProducts = Inventory.lookupProduct(query);

            if (matchingProducts.size() == 0) {
                try {
                    int id = Integer.parseInt(query);
                    if (Inventory.lookupProduct(id) != null)
                        matchingProducts.add(Inventory.lookupProduct(id));
                }
                catch (NumberFormatException e) {
                    Alert alert = new Alert (Alert.AlertType.ERROR);
                    alert.setTitle("Error Dialog");
                    alert.setContentText("Product Name not found.");
                    alert.showAndWait();
                    return;
                }
            }
            if (matchingProducts.size() != 0) {
                productsView.setItems(matchingProducts);
            }
            else {
                Alert alert = new Alert(Alert.AlertType.ERROR);
                alert.setTitle("Error Dialog");
                alert.setContentText("Product ID not found.");
                alert.showAndWait();
            }
        }
    }

    @FXML
    /**This is the onActionDisplayAddPartScreen event handler. When the Add button in the Parts pane is clicked, this handler switches to the add part screen.
     * @param event ActionEvent is generated when the user clicks the add button in the parts pane*/
    void onActionDisplayAddPartScreen(ActionEvent event) throws IOException {
        SwitchScreen("/View_Controller/Add Part.fxml", event);
    }

    @FXML
    /**This is the onActionDisplayAddProductScreen event handler. When the Add button in the Products pane is clicked, this handler switches to the add product screen.
     * @param event ActionEvent is generated when the user clicks the add button in the products pane*/
    void onActionDisplayAddProductScreen(ActionEvent event) throws IOException {
        SwitchScreen("/View_Controller/Add Product.fxml", event);
    }

    @FXML
    /**This is the onActionDeletePart event handler. When the delete button in the Parts pane is clicked, this handler confirms the action and deletes the part from the allParts list.
     * @param event ActionEvent is generated when the user clicks the delete button in the parts pane*/
    void onActionDeletePart(ActionEvent event) {
        if(partsView.getSelectionModel().getSelectedItem() == null) {
            Alert alert2 = new Alert(Alert.AlertType.ERROR);
            alert2.setContentText("Please select a part to delete.");
            alert2.showAndWait();
            return;
        }
        boolean isDeleted = false;
        Alert alert = new Alert (Alert.AlertType.CONFIRMATION, "Are you sure you want to delete this part?");

        Optional<ButtonType> result = alert.showAndWait();

        if(result.isPresent() && result.get() == ButtonType.OK) {
            isDeleted = Inventory.deletePart(partsView.getSelectionModel().getSelectedItem());
        }
    }

    @FXML
    /**This is the onActionDeleteProduct event handler. When the delete button in the Products pane is clicked, this handler confirms the action and deletes the product from the allProducts list.
     * @param event ActionEvent is generated when the user clicks the delete button in the products pane*/
    void onActionDeleteProduct(ActionEvent event) {
        if(productsView.getSelectionModel().getSelectedItem() == null) {
            Alert alert2 = new Alert(Alert.AlertType.ERROR);
            alert2.setContentText("Please select a product to delete.");
            alert2.showAndWait();
            return;
        }

        if (productsView.getSelectionModel().getSelectedItem().getAllAssociatedParts().size() != 0) {
            Alert alert3 = new Alert(Alert.AlertType.WARNING);
            alert3.setContentText("Product cannot have any associated parts.");
            alert3.showAndWait();
            return;
        }

        boolean isDeleted = false;
        Alert alert2 = new Alert (Alert.AlertType.CONFIRMATION, "Are you sure you want to delete this product?");

        Optional<ButtonType> result = alert2.showAndWait();

        if(result.isPresent() && result.get() == ButtonType.OK) {
            isDeleted = Inventory.deleteProduct(productsView.getSelectionModel().getSelectedItem());
        }
    }

    @FXML
    /**This is the onActionDisplayModifyPartScreen event handler. When the Modify button in the Parts pane is clicked, this handler switches to the modify part screen.
     * @param event ActionEvent is generated when the user clicks the add button in the products pane*/
    void onActionDisplayModifyPartScreen(ActionEvent event) throws IOException {
        if(partsView.getSelectionModel().getSelectedItem() == null) {
            Alert alert2 = new Alert(Alert.AlertType.ERROR);
            alert2.setContentText("Please select a part to modify.");
            alert2.showAndWait();
            return;
        }

        FXMLLoader loader = new FXMLLoader();
        loader.setLocation(getClass().getResource("/View_Controller/Modify Part.fxml"));
        loader.load();

        ModifyPartController MPController = loader.getController();
        MPController.sendPart(partsView.getSelectionModel().getSelectedItem());

        stage = (Stage)((Button)event.getSource()).getScene().getWindow();
        Parent scene = loader.getRoot();
        stage.setScene(new Scene(scene));
        stage.show();

    }

    @FXML
    /**This is the onActionDisplayModifyProductScreen event handler. When the Modify button in the Products pane is clicked, this handler switches to the modify product screen.
     * @param event ActionEvent is generated when the user clicks the Modify button in the products pane*/
    void onActionDisplayModifyProductScreen(ActionEvent event) throws IOException {
        if(productsView.getSelectionModel().getSelectedItem() == null) {
            Alert alert2 = new Alert(Alert.AlertType.ERROR);
            alert2.setContentText("Please select a product to modify.");
            alert2.showAndWait();
            return;
        }

        FXMLLoader loader = new FXMLLoader();
        loader.setLocation(getClass().getResource("/View_Controller/Modify Product.fxml"));
        loader.load();

        ModifyProductController MPController = loader.getController();
        MPController.sendProduct(productsView.getSelectionModel().getSelectedItem());

        stage = (Stage)((Button)event.getSource()).getScene().getWindow();
        Parent scene = loader.getRoot();
        stage.setScene(new Scene(scene));
        stage.show();
    }

    @FXML
    /**This is the onActionExitApplication event handler. When the Exit button is clicked, this handler exits the java application.
     * @param event ActionEvent is generated when the user clicks the exit button in the products pane*/
    void onActionExitApplication(ActionEvent event) {
        System.exit(0);
    }

    @Override
    /**This is the initialize method. This method initializes the controller.
     * @param rb
     * @param url*/
    public void initialize(URL url, ResourceBundle rb) {

        partsView.setItems(Inventory.getAllParts());
        partIdCol.setCellValueFactory(new PropertyValueFactory<>("id"));
        partNameCol.setCellValueFactory(new PropertyValueFactory<>("name"));
        partInventoryCol.setCellValueFactory(new PropertyValueFactory<>("stock"));
        partPriceCol.setCellValueFactory(new PropertyValueFactory<>("price"));

        productsView.setItems(Inventory.getAllProducts());
        productIdCol.setCellValueFactory(new PropertyValueFactory<>("id"));
        productNameCol.setCellValueFactory(new PropertyValueFactory<>("name"));
        productInventoryCol.setCellValueFactory(new PropertyValueFactory<>("stock"));
        productPriceCol.setCellValueFactory(new PropertyValueFactory<>("price"));

    }


}
